TechSupport - the DodgySoft Technical support system, version #2.

This project is part of the material for the book

   Objects First with Java - A Practical Introduction using BlueJ
   Seventh edition
   David J. Barnes and Michael Kölling

This project is discussed in chapter 6.


This project implements a second version of the technical support system 
example. It is an intermediate version intended to demonstrate the first
few changes discussed in this book chapter.


To start this program, create a SupportSystem object and execute the "start" 
method.

Then start describing your problem by typing in the terminal window.

Part 3 -

Q43: The 'putIfAbsent' method of HashMap inserts a key–value pair only if the key does not already exist in the map. If the key already exists, it leaves the value unchanged. This is different from put, which overwrites any existing value for the key.

Q44: I created a new class called 'WordCounter' that keeps track of how many times each word is typed by the user. It uses a 'HashMap<String, Integer>' where the key is the word and the value is the count. I added a method 'printWordCounts()' that prints all the words and how many times they appeared, so the system can display usage statistics after the “goodbye” message.

Q45: I implemented an accessory method for response, math, and the responder class. The method 'printNon-MappedWordCounts()' will print the usage count of words that are not already keys in the response map which ensures we can track which words were entered by the user, but they not have predefined responses.

Q46: The documentation generated by BlueJ provides class diagrams, method summaries, and descriptions based on Javadoc comments. It is accurate for listing the structure of the project, but the completeness depends on the quality of the comments in the code. 
The useful parts are the class summaries and method details and the less useful parts are places where methods lack proper descriptions. I did not find technical errors in the documentation, but some descriptions are too vague without detailed Javadoc.

Q47: These tags influence formatting in the documentation by organizing the information into labeled sections under each class or method. Which are :
@author – states who wrote the code
@version – provides version information
@param – describes a method parameter
@return – describes the return value of a method

Q48: These tags improve clarity and navigation in the generated documentation. Which are: 
@see – creates a link to related classes or methods
@since – specifies the version when the feature was added
@throws – documents exceptions a method can throw
@deprecated – marks code as outdated and not recommended
{@code ...} – shows text in code font
{@link ...} – creates inline links to other classes/methods

Q49: I added proper Javadoc comments to all classes in my TechSupport project, including SupportSystem, Responder, InputReader, and WordCounter and also the classes from the tech-support-v1 project. This ensures the project has clear, professional documentation that can be generated using BlueJ’s Project Documentation function.
